#
# Copyright © 2023 - 现在. LMY. All Rights Reserved.
#
log4j.rootLogger=INFO , console, logFile
# ============================配置日志输出目的地===========================
# appenderName就是指日志输出的目的地,和log4j.rootLogger中的相同。
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.logFile=org.apache.log4j.DailyRollingFileAppender
# org.apache.log4j.ConsoleAppender （控制台）
# org.apache.log4j.FileAppender （文件）
# org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）
# org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件）
# org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方）
# ==============================设置日志输出目的地（控制台）==============================
# System.out,输出到控制台
log4j.appender.console.Target=System.out
# System.err,输出到控制台
# log4j.appender.console.Target=System.err
# ==============================设置文件输出路径（日志文件）==============================
# log为日志文件的文件名，路径为根目录下的logs文件夹下的log.log文件
log4j.appender.logFile.file=../logs/log.log
# 当天的日志是log.log，当天过去之后，mylog.log就会重命名为log_yyyy-MM-dd.log ,yyyy-MM-dd为当天的日期
log4j.appender.logFile.DatePattern='_'yyyy-MM-dd'.log'
# ==============================配置日志信息的格式（布局）==============================
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.logFile.layout=org.apache.log4j.PatternLayout
# org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）
# org.apache.log4j.PatternLayout （可以灵活地指定布局模式）
# org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）
# org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息）
# ==============================配置日志信息的格式==============================
# 毫秒 [线程名] 日志级别 全路径类名 行号 日志信息
#log4j.appender.console.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
# [日期] 日志级别 全路径类名 方法名 行号 日志信息
log4j.appender.console.layout.ConversionPattern=[%d{yyyy-MM-dd HH\:mm\:ss}] %-5p %c %M %L -%m%n
log4j.appender.logFile.layout.ConversionPattern=[%d{yyyy-MM-dd HH\:mm\:ss}] %-5p %c %M %L -%m%n
# layout中的参数都以%开始，后面不同的参数代表不同的格式化信息（参数按字母表顺序列出）：# － X 号 : X 信息输出时左对齐；
# %p: 输出日志信息优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS}
# %r: 输出自应用启动到输出该 log 信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于 %C.%M(%F:%L) 的组合 , 包括类目名、发生的线程，以及在代码中的行数。举例： Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的 NDC( 嵌套诊断环境 ), 尤其用到像 Java servlets 这样的多客户多线程的应用中。
# %%: 输出一个 "%" 字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息 , 产生的日志具体信息
# %n: 输出一个回车换行符， Windows 平台为 "/r/n" ， Unix 平台为 "/n" 输出日志信息换行
# %M: 输出方法名
# %C: 输出类名
# ==============================设置日志字符集编码格式==============================
log4j.appender.console.encoding=utf-8
log4j.appender.logFile.encoding=utf-8
# ==============================设置日志的输出级别==============================
# 和log4j.rootLogger里面的相比取级别高的。
log4j.appender.console.Threshold=INFO
log4j.appender.logFile.Threshold=INFO